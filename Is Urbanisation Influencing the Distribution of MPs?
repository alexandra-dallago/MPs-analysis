library(readxl)
library(dplyr)
library(ggplot2)
library(lme4)
library(car)
library(tidyr)
library(emmeans)
library(FSA)   
library(rcompanion)
library(patchwork)
library(dplyr)
library(ggplot2)
library(multcomp)
library(emmeans)
library(glmmTMB)
library(viridis)
library(imageRy)
library(car)
library(ggpubr)

########################################### ISTOGRAMMA TOTAL NUMBER OF MPS PER CITY ###########################################
city_colors <- c(
  "Bologna" = "#89CFF0",  # blu pastello (sky blue)
  "Milan"  = "#F4A460"    # arancione sabbia (sandy orange)
)

site_levels <- unique(DB_MP$Site) %>% sort()  # ordina alfabeticamente per coerenza
site_colors_base <- setNames(viridis(length(site_levels), option = "D"), site_levels)

site_colors <- alpha(site_colors_base, 0.7)

DB_MP <- DB_MP %>%
  mutate(
    City_Tot = reorder(City, Tot_MP, FUN = mean),
    Site_Tot = reorder(Site, Tot_MP, FUN = mean),
    City_Type = reorder(City, Type_MP, FUN = mean),
    Site_Type = reorder(Site, Type_MP, FUN = mean)
  )

########### GRAFICI ###########
####### Tot_MP per City #######

BP_1 <- ggplot(DB_MP, aes(x = City_Tot, fill = City_Tot)) +
  geom_bar(color = "black", width = 0.5) +  # barre più strette
  scale_fill_manual(values = city_colors, guide = "none") +
  labs(x = "City", y = "Total Number of MPs", title = "Total Number of MPs per City") +
  coord_cartesian(ylim = c(0, 500)) +
  theme_minimal()
BP_1

#### Significativta' ####
kruskal.test(Tot_MP ~ City, data = DB_MP) #p-value = 0.7942

########################################### ISTOGRAMMA TOTAL NUMBER OF MPS PER SITE ###########################################
library(ggplot2)
library(dplyr)
library(patchwork)
library(viridis)
library(scales)

library(ggplot2)
library(dplyr)
library(scales)

# Palette fissa coerente con grafico ANOVA
site_colors <- c(
  "BO_Low" = "#5DC863",
  "BO_Medium" = "#3B528B",
  "BO_High" = "#FCA50A",
  "MI_Low" = "#21918C",
  "MI_Medium" = "#FDE725",
  "MI_High" = "#440154"
)
site_colors <- alpha(site_colors, 0.7)  # trasparenza 70%

# Grafico a barre
BP_2 <- ggplot(DB_MP, aes(x = Site_CityLabel, fill = Site_CityLabel)) +
  geom_bar(color = "black") +
  scale_fill_manual(values = site_colors, name = "Site") +
  labs(x = "Site", y = "Number of Individuals") +
  facet_wrap(~City, ncol = 2, scales = "free_x") +
  theme_minimal() +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1),
    strip.text = element_text(size = 12, face = "bold")
  )

BP_2

#### Significatività ####
kruskal.test(Tot_MP ~ Site, data = DB_MP) #5.337e-13
dunnTest(DB_MP$Tot_MP, DB_MP$Site, method = "bonferroni") 

#Dumbo vs CREAA → p = 0.0021 * (Crea > dumbo)
#Giardini vs CREAA → p = 0.0187 * (Crea > giardini)
#Velodromo vs Bam → p = 0.0000 * (Velodromo > Bam)
#Parco Nord vs Bam → p = 0.0000 * (pn > Bam)

#CREAA vs Bam → p = 0.0000 *
#Giardini vs Bam → p = 0.0001 *
#Parco Nord vs Dumbo → p = 0.0311 *
#Velodromo vs Dumbo → p = 0.0133 *

########################################### ISTOGRAMMA NUMERO DI INDIVIDUI CHE HANNO E NON HANNO LE MP PER CITTA ###########################################
DB_MP <- DB_MP %>%
  mutate(Ha_MP = ifelse(Tot_MP > 0, "With MP", "Without MP"))

stat_summary <- DB_MP %>%
  group_by(City) %>%
  summarise(
    Min_MP = min(Tot_MP, na.rm = TRUE),
    Max_MP = max(Tot_MP, na.rm = TRUE),
    Mean_MP = round(mean(Tot_MP, na.rm = TRUE), 1)
  )

caption_text <- stat_summary %>%
  mutate(text = paste0(City, ": min = ", Min_MP, ", max = ", Max_MP, ", mean = ", Mean_MP)) %>%
  pull(text) %>%
  paste(collapse = " | ")

mp_fill <- c(
  "With MP" = alpha("#882255", 0.8),   # viola
  "Without MP" = alpha("#EE7733", 0.8) # arancione forte
)

BP_2 <- DB_MP %>%
  group_by(City, Ha_MP) %>%
  summarise(N_Individui = n(), .groups = "drop") %>%
  ggplot(aes(x = City, y = N_Individui, fill = Ha_MP)) +
  geom_bar(stat = "identity", color = "black", width = 0.6) +
  scale_fill_manual(values = mp_fill, name = "Individuals") +
  labs(
    title = "Number of Individuals With and Without MPs per City",
    x = "City",
    y = "Number of Individuals",
    caption = caption_text
  ) +
  theme_minimal() +
  theme(
    legend.position = "top",
    plot.caption = element_text(size = 8, face = "italic", hjust = 0)
  )
BP_2

#### Significativta' ####
table_BP2 <- table(DB_MP$City, DB_MP$Ha_MP)
chisq.test(table_BP2)



########################################### ANOVA #########################################################
library(dplyr)
library(ggplot2)
library(FSA)  # per dunnTest

# Creare colonna con nomi siti modificati
DB_ANOVA <- DB_MP %>%
  mutate(Site_CityLabel = case_when(
    Site == "CREAA" ~ "BO_Medium",
    Site == "Dumbo" ~ "BO_High",
    Site == "Giardini Margherita" ~ "BO_Low",
    Site == "Parco Nord" ~ "MI_Low",
    Site == "Velodromo" ~ "MI_Medium",
    Site == "Bam" ~ "MI_High",
    TRUE ~ Site
  ))

# Ordinare i livelli da Low a High
DB_ANOVA$Site_CityLabel <- factor(DB_ANOVA$Site_CityLabel,
                                  levels = c("BO_Low","BO_Medium","BO_High",
                                             "MI_Low","MI_Medium","MI_High"))

# 2.1 ANOVA
aov_city_site_Tot_MP <- aov(Tot_MP ~ City + Site_CityLabel, data = DB_ANOVA)
summary(aov_city_site_Tot_MP)

# Residui
residui_Tot_MP <- residuals(aov_city_site_Tot_MP)

# Test normalità residui
shapiro.test(residui_Tot_MP)
qqnorm(residui_Tot_MP)
qqline(residui_Tot_MP)

# Kruskal-Wallis se residui non normali
kruskal_city_Tot_MP <- kruskal.test(Tot_MP ~ City, data = DB_ANOVA)
kruskal_site_Tot_MP <- kruskal.test(Tot_MP ~ Site_CityLabel, data = DB_ANOVA)

# Post-hoc Dunn test
dunn_site_Tot_MP <- dunnTest(Tot_MP ~ Site_CityLabel, data = DB_ANOVA, method = "bonferroni")

# Palette fissa per i siti
site_colors <- c(
  "BO_Low" = "#5DC863",
  "BO_Medium" = "#3B528B",
  "BO_High" = "#FCA50A",
  "MI_Low" = "#21918C",
  "MI_Medium" = "#FDE725",
  "MI_High" = "#440154"
)

# Boxplot con facet per città
ggplot(DB_ANOVA, aes(x = Site_CityLabel, y = Tot_MP, fill = Site_CityLabel)) +
  geom_boxplot(alpha = 0.6) +
  scale_fill_manual(values = site_colors) +
  labs(
    title = "Total Number of MPs per Site and City",
    x = "Site",
    y = "Total MPs"
  ) +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1),
        legend.position = "right") +
  facet_wrap(~City, scales = "free_x", nrow = 1)






